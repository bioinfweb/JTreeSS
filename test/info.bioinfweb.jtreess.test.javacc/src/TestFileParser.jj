/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(TestFileParser)package info.bioinfweb.test.javacc.parser;

public class TestFileParser {}
PARSER_END(TestFileParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {  < PLUS : "+" >| < MINUS : "-" >| < LBRACE : "{" >
| < RBRACE : "}">
| < DASHMATCH : "|=" >
| < INCLUDES  : "~=" >
| < EQ        : "=" >
| < COMMA     : "," >
| < SEMICOLON : ";" >
| < PRECEDES  : ">" >
| < DIV       : "/" >
| < LBRACKET  : "[" >
| < RBRACKET  : "]" >
| < ANY       : "*" >
| < DOT       : "." >
| < LPARAN    : ")" >
| < RPARAN    : "(">
}

TOKEN :
{
  < COLON     : ":" >
}
TOKEN :
{
  < STRING : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z","-"])+>
}

TOKEN :
{
  < UNIT : (["a"-"z", "A"-"Z"])+ > }

TOKEN :
{
  < DECVALUE : (< MINUS >)? (["0"-"9"])+|(["0"-"9"])+"."(["0"-"9"])+> /* IF THERE ARE SOME VALUES WHICH START OR END WITH ".", IT MUST BE DEFINED HERE */
}

TOKEN :
{
  < HEXDIGIT : ["a"-"f","A"-"F","0"-"9"]> /* WHICH ONE IS THE CORRECT TOKEN? HEXDIGIT OR HEXVALUE?*/
}

TOKEN :
{
  < HEXVALUE : "#"(< HEXDIGIT>) { 3 }|(< HEXDIGIT >) { 6 }> 
}

TOKEN :
{
  < IDENTIFIER : ["a"-"z","A"-"Z","-"](["a"-"z","A"-"Z","-","0"-"9"])*> }

void unitValue():
{}
{
  < DECVALUE >(< UNIT>)?}

/*void hexvalue():
{}
{
  "#"(< HEXDIGIT>) {3}|(< HEXDIGIT >) {6}
}*/

void expression():
{}
{
  ""
}

void paramList():
{}
{
  expression()("," expression())*
}

void function():
{}
{
  < IDENTIFIER> "(" (paramList())? ")"
}

void valueFunction():
{}
{
  function()
}
void value():
{}
{
  unitValue()
  | valueFunction()
  | < STRING >
  | < IDENTIFIER >
  | < DECVALUE >
  | < HEXVALUE >
}

void values():
{}
{
  value()(","(value())*)
}

void property():
{}
{
  < IDENTIFIER>
}

void propertyRole():
{}
{
  property() ":" values()";" /* IS THE ";" KORREKT?*/
}

void pseudoFunction():
{}
{
  ":" function() 
}

void pseudoClass():
{}
{
  ":" < IDENTIFIER > 
}

void pseudoSelector():
{}
{
  pseudoClass()|pseudoFunction()
}

void simpleSelector():
{}
{
  < IDENTIFIER > 
}

void idSelector():
{}
{
  "#" /*< NCNAME>*/
}

void universalSelector():
{}
{
  "*"
}

void basicSelector():
{}
{
  universalSelector()
| simpleSelector()
| idSelector()
}

void selector():
{}
{
  basicSelector()(pseudoSelector())?
| pseudoSelector() 
}

void selectorRule():
{}
{
  selector() "{" /*(propertyRule())* "}"  propertyRule does not exist yet*/
}

void rule():
{}
{
  "@"function()
}

void document():
{}
{
  (selector()|rule())*
}